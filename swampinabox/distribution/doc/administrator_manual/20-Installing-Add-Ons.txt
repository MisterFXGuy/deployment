Installing Additional Components
--------------------------------


[[add-on-platforms]]
Assessment Platforms
~~~~~~~~~~~~~~~~~~~~

The SWAMP-in-a-Box installer includes and installs only the Ubuntu 16.04
platform for performing assessments. For C/C++ packages, additional
platforms are available, including releases of CentOS, Debian, Fedora,
Scientific Linux, and older releases of Ubuntu. (Packages for other
languages will always be assessed on Ubuntu 16.04.)


==== Before You Begin ====

* You will need `root` access to the SWAMP-in-a-Box host.
* You will need `root` access to the SWAMP-in-a-Box database.


==== Procedure ====

1. Visit https://platform.swampinabox.org/platform-images/.

2. Download and copy to the SWAMP-in-a-Box host the `.qcow2.gz` files
corresponding to the additional platforms you wish to perform assessments
on. The naming scheme for these files is as follows:

+
----
condor-<Linux distribution>-<version>-<32 or 64 bit>-master-<YYYYMMDD>.qcow2.gz
----

+
When downloading the files, name the copies exactly as shown on
https://platform.swampinabox.org/. Otherwise, they will not be recognized as
supported platforms in the next step.

3. On the SWAMP-in-a-Box host, for each file, as `root` (or using `sudo`),
run the `install_platform` script, providing the path to the `.qcow2.gz`
file:

+
----
/opt/swamp/bin/install_platform <path to .qcow2.gz file>
----

+
When prompted, provide the password for the database's `root` user, which is
needed to add the platform to the database and make it available in the
SWAMP. Note that `install_platform` will likely take several minutes to
complete due to the size of the file.


Assessment Tools
~~~~~~~~~~~~~~~~

The SWAMP-in-a-Box installer includes and installs a variety of tools for
assessing packages.

For C/C++ packages, three additional tools can be installed:

  * <<about-codesonar,CodeSonar>>,
  * <<about-parasoft,Parasoft C/C++test>>, and
  * <<about-coverity,Synopsys Static Analysis (Coverity)>>.

For Java packages, two additional tools can be installed:

  * https://www.owasp.org/index.php/OWASP_Dependency_Check[OWASP Dependency Check] and
  * <<about-parasoft,Parasoft Jtest>>.

The process for <<add-on-tool-obtain-archive,obtaining tool
installers/archives from their vendors>> and
<<add-on-tool-create-archive,packaging them in the format that the SWAMP
expects>> differs significantly between the tools. However, once that is
done, the process for for <<add-on-tool-install,installing>> and
<<add-on-tool-configure,configuring>> the tools for use in the SWAMP is
largely similar.


==== Before You Begin ====

* You will need `root` access to the SWAMP-in-a-Box host.
* You will need `root` access to the SWAMP-in-a-Box database.


[[add-on-tool-obtain-archive]]
==== Obtain the Tool Installer/Archive from Its Vendor ====

* For CodeSonar, Parasoft C/C+\+test, Parasoft Jtest, and Synopsys Static
  Analysis (Coverity): See the <<about-add-ons,appendix on SWAMP-in-a-Box
  add ons>> for information on how to contact each tool's vendor. You will
  need to obtain one or both of the 32-bit and 64-bit Linux archives for the
  tool you wish to install. For Parasoft C/C++test and Parasoft Jtest, only
  versions 10.3.0 and later are supported.

+
You will also need to follow the vendor's instructions for setting up
a license server and ensure that the SWAMP-in-a-Box host is able to contact
the license server on the required ports. (None of the steps below will
modify the configurations of any firewalls.)

+
The archives for CodeSonar should be named:

+
----
codesonar-<version>.<YYYYMMDD>-i686-pc-linux.tar.gz    (32-bit)
codesonar-<version>.<YYYYMMDD>-x86_64-pc-linux.tar.gz  (64-bit)
----

+
The archives for Parasoft C/C++test should be named:

+
----
parasoft_cpptest_engine_<version>_linux.tar.gz         (32-bit)
parasoft_cpptest_engine_<version>_linux_x86_64.tar.gz  (64-bit)
----

+
The archives for Parasoft Jtest should be named:

+
----
parasoft_jtest_<version>_linux_x86.tar.gz     (32-bit)
parasoft_jtest_<version>_linux_x86_64.tar.gz  (64-bit)
----

+
The archives for Synopsis Static Analysis (Coverity) should be named:

+
----
cov-analysis-linux-<version>.tar.gz    (32-bit)
cov-analysis-linux64-<version>.tar.gz  (64-bit)
----

* For OWASP Dependency Check: Visit
  https://platform.swampinabox.org/tool-archives/ and download the
  `dependency-check-<version>.tar.gz` file corresponding to the version of
  OWASP Dependency Check that you would like to install. The archive from
  https://www.swampinabox.org/[swampinabox.org] includes scripts and
  documentation for integrating OWASP Dependency Check into the SWAMP.


[[add-on-tool-create-archive]]
==== Create the SWAMP Tool Archive ====

* For CodeSonar, Parasoft C/C++test, Parasoft Jtest, and Synopsys Static
  Analysis (Coverity): Run the `make_swamp_tool` script to package the
  vendor's installers into the archive format that the SWAMP uses.

+
----
/opt/swamp/bin/make_swamp_tool \
    --tool-name <gt-csonar or coverity or ps-ctest or ps-jtest> \
    --tool-version <version> \
    --installer-linux32 <path to 32-bit archive> \
    --installer-linux64 <path to 64-bit archive>
----

+
Specify `gt-csonar`, `coverity`, `ps-ctest`, or `ps-jtest` for the
`--tool-name` option, depending on the tool being packaged. Omit the
`--installer-linux32` option if you have only the 64-bit installer, and
similarly for the `--installer-linux64` option.

+
When `make_swamp_tool` completes, the output should include the path to the
SWAMP tool archive file that was created. Note that `make_swamp_tool` will
likely take several minutes to complete due to the size of the installers.

* For OWASP Dependency Check: Expand the archive that you downloaded from
  https://platform.swampinabox.org/tool-archives/[swampinabox.org]:

+
----
tar zxvf dependency-check-<version>.tar.gz
----

+
This should create a directory `dependency-check-<version>`. Inside the
directory will be `README` files in various formats. Follow the directions
in the `README` for creating the SWAMP tool archive for OWASP Dependency
Check. Make note of whether you will need to <<add-on-tool-configure,add
additional entries to `services.conf`>> or
<<configure-internetless,configure assessments to run without internet
access>> (i.e., "internet-inaccessible" assessments).


[[add-on-tool-install]]
==== Install the Tool ====

The `install_tool` script is used to install and manage any tools that are
added onto a SWAMP-in-a-Box installation. The script must always be invoked
with the following command line arguments:

* `--tool <id>`: This specifies the tool being managed. Recognized values
  for `<id>` include:

  ** `coverity`: Synopsys Static Analysis (Coverity)
  ** `dependency-check`: OWASP Dependency Check
  ** `gt-csonar`: GrammaTech CodeSonar
  ** `ps-ctest`: Parasoft C/C++test
  ** `ps-jtest`: Parasoft Jtest

* `--add`, `--remove`, `--replace`, or `--configure`: This determines the
  "mode" that the script will run in, i.e., whether to add a new version of
  the tool, remove an existing version of the tool, replace an existing
  version of the tool, or configure the tool. Depending on the mode
  selected, other command line arguments will be required.

To add a new version of a tool to the swamp, as `root` (or using `sudo`),
run `install_tool` as follows:

----
/opt/swamp/bin/install_tool \
    --tool <id> \
    --add \
    --tool-version <version> \
    --tool-archive <path to SWAMP tool archive file>
----

For some tools, notably Parasoft C/C++test and Parasoft Jtest, you might
need to pass a different version string to `install_tool` than the one for
`make_swamp_tool`. For example, compared to the version string for
`make_swamp_tool`, you might need to append `-2` or `-12` to match the
filename produced by `make_swamp_tool`.

Note that `install_tool` will likely take several minutes to complete due to
the size of the tool archive.


[[add-on-tool-configure]]
==== Configure the Tool ====

As `root` (or using `sudo`), run the `install_tool` script with the
`--configure` option, providing additional options as needed.

* For tools that require a license server (CodeSonar, Parasoft C/C++test,
  Parasoft Jtest, and Synopsys Static Analysis (Coverity)), use the
  `--license-server-host` and `--license-server-port` options to specify the
  hostname of the license server to use and the port on which to contact the
  license server:

+
----
/opt/swamp/bin/install_tool \
    --tool <id> \
    --configure \
    --license-server-host <hostname of the license server> \
    --license-server-port <port number>
----

+
For Parasoft C/C++test and Parasoft Jtest, the script will prompt for the
username and password to use for contacting the license server.

+
In addition, use the `--limit` option to specify how many simultaneous
instances of the tool the SWAMP may run:

+
----
/opt/swamp/bin/install_tool \
    --tool <id> \
    --configure \
    --limit <max number of simultaneous instances>
----

* For tools that require additional `services.conf` entries (OWASP
  Dependency Check), use the `--tool-conf` option to specify the path to
  a file containing additional entries that should be added to
  `services.conf`:

+
----
/opt/swamp/bin/install_tool \
    --tool <id> \
    --configure \
    --tool-conf <path to file containing entries for services.conf>
----


[[add-on-tool-manage]]
==== Manage the Installed Versions of the Tool ====

* Additional versions of each tool can be installed using the directions
  above. In the SWAMP web application, the "latest" version of the tool will
  be whichever version was *installed* most recently. We recommend
  installing multiple versions in order (e.g., 1.0, 2.0, 2.1, 3.0, etc.) so
  that the "latest" version matches users' expectations.

* If you have previously installed, say, only the 32-bit version of a tool
  and now wish to make both the 32-bit and 64-bit versions available, first
  <<add-on-tool-create-archive,create the SWAMP tool archive>>, as above, to
  package the 32-bit and 64-bit archives together for the SWAMP. Then as
  `root` (or using `sudo`), run the `install_tool` script with the
  `--replace` option:

+
----
/opt/swamp/bin/install_tool \
    --tool <id> \
    --replace \
    --tool-version <version> \
    --tool-archive <path to SWAMP tool archive file>
----

* If you wish to remove a version of a tool from the SWAMP, as `root` (or
  using `sudo`), run the `install_tool` script with the `--remove` option,
  providing the version to remove:

+
----
/opt/swamp/bin/install_tool \
    --tool <id> \
    --remove \
    --tool-version <version>
----


[[add-on-viewers]]
Viewers
~~~~~~~

The SWAMP-in-a-Box installer includes and installs only a "native" viewer
for viewing the results of an assessment. The SWAMP web application also
provides a link to download the raw results of an assessment as a SCARF XML
file.

For users with needs that are not met by either of these options, it is
possible to install a SWAMP-specific version of Code Dx for viewing results.
See the <<about-add-ons,appendix on SWAMP-in-a-Box add ons>> for
<<about-code-dx,information about the SWAMP-specific version of Code Dx and
how to obtain it>>. (SWAMP-in-a-Box currently does *not* support integrating
with an existing, standalone Code Dx installation.)


==== Before You Begin ====

* You will need `root` access to the SWAMP-in-a-Box host.

* You will need `root` access to the SWAMP-in-a-Box database.

* You will need to obtain the `.war` file for the SWAMP-specific version of
  Code Dx from Code Dx, Inc. If you are provided with a `.zip` file or some
  other archive format, first expand the archive and locate the `.war` file
  within the expanded contents.

+
Note that the SWAMP officially supports version 1.8.3 of Code Dx. Later
versions might work, but the experience for end users will be significantly
different from 1.8.3.


==== Procedure ====

1. Copy the Code Dx `.war` file obtained from Code Dx, Inc. to the
SWAMP-in-a-Box host.

2. On the SWAMP-in-a-Box host, as `root` (or using `sudo`), run the
`install_codedx` script, providing the path to the `.war` file:

+
----
/opt/swamp/bin/install_codedx <path to Code Dx .war file>
----

+
When prompted, provide the password for the database's `root` user, which is
needed to add the Code Dx viewer to the database and make it available in
the SWAMP.
