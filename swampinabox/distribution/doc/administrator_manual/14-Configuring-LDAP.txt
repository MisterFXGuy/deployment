Configuring LDAP for User Authentication and Attributes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In a basic installation of SWAMP-in-a-Box, user information for the SWAMP is
stored in the `project` database in the `user` table with the following
information (attributes):

    * SWAMP user UID
    * username
    * password (encrypted using BCRYPT)
    * first name
    * last name
    * full name
    * email
    * affiliation

It is possible to configure the SWAMP to use a local LDAP or Active
Directory (AD) server -- assuming Active Directory has been configured to
act as an LDAP server, as is the default -- to store user records and their
attributes.

You can configure your SWAMP-in-a-Box to access user accounts in the LDAP/AD
server in one of two ways: with read-only access or with the ability to
create and edit records in the LDAP/AD server.

You would configure your SWAMP-in-a-Box with read-only access to an LDAP/AD
server when the LDAP/AD server is managed by processes external to the
SWAMP. Your SWAMP-in-a-Box may then be one of multiple clients of the
LDAP/AD server. In this case, the SWAMP does not provide workflows to create
user records or edit any of the user attributes described above.

If you configure SWAMP-in-a-Box with the ability to create and edit user
records in the LDAP/AD server, it is assumed that the SWAMP is the primary,
if not only, client of the LDAP/AD server. In this case, the SWAMP provides
the same workflows for creating and editing user records that it does when
it is not configured with an LDAP/AD server. The only difference is that the
user records and attributes described above are stored in the LDAP/AD server
instead of in the `user` table in the SWAMP's local database.


==== Configuring LDAP Options in the Web Backend Configuration File ====


===== Before You Begin =====

* You will need `root` access to the SWAMP-in-a-Box host.

* Consult the SWAMP-in-a-Box Reference Manual for detailed descriptions of
  the parameters discussed below.


===== Procedure =====

1. As `root` (or using `sudo`), edit the web backend configuration file:

+
----
vi /var/www/swamp-web-server/.env
----

2. Set the following parameters to enable LDAP and configure whether LDAP is
read-only:

+
----
LDAP_ENABLED
LDAP_READ_ONLY
----

3. Set the following parameters to determine how user passwords are
validated:

+
----
APP_PASSWORD_ENCRYPTION_METHOD
LDAP_PASSWORD_VALIDATION
----

4. Set the following parameters to identify your LDAP/AD server and provide
SWAMP-in-a-Box access to it:

+
----
LDAP_HOST
LDAP_PORT
LDAP_WEB_USER
LDAP_WEB_USER_PASSWORD
LDAP_PASSWORD_SET_USER (only if LDAP_READ_ONLY=false)
LDAP_PASSWORD_SET_USER_PASSWORD (only if LDAP_READ_ONLY=false)
----

5. Set the following parameters to identify where in the LDAP/AD structure
user records are stored:

+
----
LDAP_BASE_DN
LDAP_USER_RDN_ATTR
----

6. Set the following parameters to map SWAMP user attributes to the
corresponding attributes in your LDAP/AD server:

+
----
LDAP_SWAMP_UID_ATTR
LDAP_FIRSTNAME_ATTR
LDAP_LASTNAME_ATTR
LDAP_FULLNAME_ATTR
LDAP_PASSWORD_ATTR
LDAP_USERNAME_ATTR
LDAP_EMAIL_ATTR
LDAP_ORG_ATTR
----

7. Set the following parameter with a comma-separated list of the
`objectClass` attributes required for new user records in your LDAP/AD
server. This is applicable only if `LDAP_READ_ONLY=false`.

+
----
LDAP_OBJECTCLASS
----

8. Save your changes to the `.env` file.


==== Designating an Initial SWAMP Administrator ====

When SWAMP-in-a-Box is installed, a default SWAMP administrator user is set
up. The user record for this SWAMP administrator, the "admin-s" user, is
stored in the SWAMP's local database. You can sign in as this user and
invite other SWAMP users to become SWAMP administrators, as needed.

However, SWAMP-in-a-Box is designed to access only one source of user
records. Therefore, when you configure SWAMP-in-a-Box to use an LDAP/AD
server for user records, you can no longer sign in to your SWAMP with users
whose records are stored in the local database. This means that initially,
on configuring SWAMP-in-a-Box to use a local LDAP/AD server, your SWAMP will
have no administrator users.

You can use the following procedure to promote a user to a SWAMP administrator.


===== Before You Begin =====

* You will need access to the SWAMP-in-a-Box host.

* You should have configured the SWAMP-in-a-Box to use an LDAP/AD server.

* You should have signed up or signed in to your SWAMP with the user to be
  promoted.

* You will need the `SWAMP_UID` value for the user to be promoted. This is
  the value which corresponds to the `LDAP_SWAMP_UID_ATTR` attribute for the
  user.

* You will need the password for the `web` database user for the SWAMP's
  SQL database. This can be found in `/var/www/swamp-web-server/.env` on the
  SWAMP-in-a-Box host. Note that `root` access is required to view this
  file.


===== Procedure =====

1. Enter the following on the command line for your SWAMP-in-a-Box host:

+
----
export PROJECT_DB_HOST=localhost
export PROJECT_DB_PORT=3306
export PROJECT_DB_DATABASE=project
export PROJECT_DB_USERNAME=web
export SWAMP_UID=<unique SWAMP_UID of new admin user>
mysql -h $PROJECT_DB_HOST -P $PROJECT_DB_PORT -u $PROJECT_DB_USERNAME -p \
      -e "USE $PROJECT_DB_DATABASE; UPDATE user_account SET admin_flag=1 \
      WHERE user_uid='$SWAMP_UID';"
----

2. When prompted, enter the password for the `web` database user.

3. Sign in to the SWAMP with the user and confirm that the user now has
SWAMP administrator access.


==== Examples ====

Below are some examples showing the output of a command line `ldapsearch`
query and the corresponding `.env` configuration.

[example]
.Secure LDAP Server with Anonymous Read Access
====
.ldapsearch command
----
ldapsearch -LLL -x -H ldaps://ldap.ncsa.illinois.edu \
           -b "dc=ncsa,dc=illinois,dc=edu" "(sn=*smith*)"
----

.ldapsearch output
----
dn: uid=jsmith,ou=People,dc=ncsa,dc=illinois,dc=edu
cn: John Smith
givenName: John
sn: Smith
uid: jsmith
mail: jsmith@illinois.edu
employeeType: all_ncsa_employe
objectClass: top
objectClass: person
objectClass: organizationalPerson
objectClass: inetOrgPerson
objectClass: inetUser
objectClass: posixAccount
uidNumber: 28064
gidNumber: 202
homeDirectory: /afs/ncsa/.u7/jsmith
loginShell: /bin/csh
memberOf: cn=jira-users,ou=Groups,dc=ncsa,dc=illinois,dc=edu
memberOf: cn=grp_bw_ncsa_staf,ou=Groups,dc=ncsa,dc=illinois,dc=edu
memberOf: cn=org_all_groups,ou=Groups,dc=ncsa,dc=illinois,dc=edu
memberOf: cn=org_do,ou=Groups,dc=ncsa,dc=illinois,dc=edu
memberOf: cn=all_ncsa_employe,ou=Groups,dc=ncsa,dc=illinois,dc=edu
memberOf: cn=grp_jira_users,ou=Groups,dc=ncsa,dc=illinois,dc=edu
memberOf: cn=all_users,ou=Groups,dc=ncsa,dc=illinois,dc=edu
memberOf: cn=grp_bldg_ncsa,ou=Groups,dc=ncsa,dc=illinois,dc=edu
memberOf: cn=grp_bldg_both,ou=Groups,dc=ncsa,dc=illinois,dc=edu
memberOf: cn=org_cisr,ou=Groups,dc=ncsa,dc=illinois,dc=edu
memberOf: cn=org_ici,ou=Groups,dc=ncsa,dc=illinois,dc=edu
memberOf: cn=org_csd,ou=Groups,dc=ncsa,dc=illinois,dc=edu
memberOf: cn=prj_cerb_users,ou=Groups,dc=ncsa,dc=illinois,dc=edu
memberOf: cn=iam_sec_testing,ou=Groups,dc=ncsa,dc=illinois,dc=edu
memberOf: cn=lsst_users,ou=Groups,dc=ncsa,dc=illinois,dc=edu
memberOf: cn=lsst_security,ou=Groups,dc=ncsa,dc=illinois,dc=edu
memberOf: cn=ncsa-ca,ou=Groups,dc=ncsa,dc=illinois,dc=edu
----

.Corresponding `.env` entry
----
LDAP_ENABLED=true
LDAP_PASSWORD_VALIDATION=true
LDAP_READ_ONLY=true
LDAP_HOST=ldaps://ldap.ncsa.illinois.edu
LDAP_PORT=636
LDAP_BASE_DN=ou=People,dc=ncsa,dc=illinois,dc=edu
LDAP_USER_RDN_ATTR=uid
LDAP_SWAMP_UID_ATTR=uid
LDAP_FIRSTNAME_ATTR=givenName
LDAP_LASTNAME_ATTR=sn
LDAP_FULLNAME_ATTR=cn
LDAP_PASSWORD_ATTR=userPassword
LDAP_USERNAME_ATTR=uid
LDAP_EMAIL_ATTR=mail
LDAP_ORG_ATTR=ignore
LDAP_OBJECTCLASS=<not applicable, ldap is read-only>
LDAP_WEB_USER=<user here>
LDAP_WEB_USER_PASSWORD=<password here>
LDAP_PASSWORD_SET_USER=<not applicable, ldap is read-only>
LDAP_PASSWORD_SET_USER_PASSWORD=<not applicable, ldap is read-only>
----

.Notes

In the query response, you should see:

----
dn: uid=jsmith,ou=People,dc=ncsa,dc=illinois,dc=edu
----

In this case, the `LDAP_USER_RDN_ATTR` is the key for the `uid=jsmith`
portion of the `dn`, and the `LDAP_BASE_DN` is the rest of the `dn` string.

Since the `uid` field is globally unique in the LDAP directory, we set that
for `LDAP_SWAMP_UID_ATTR`.

We also want the user to enter "jsmith" for username/password, so we use the
default value for `LDAP_USERNAME_ATTR=uid`.

Finally, we use the default value of `LDAP_PORT=636` because we are
connecting with `ldaps://`.
====


[example]
.Insecure Active Directory Server with Credentialed User
====
.ldapsearch command
----
ldapsearch -LLL -x -H ldap://128.104.100.232 \
           -b "dc=swamp,dc=ad" \
           -D "ldapquery@swamp.ad" \
           -W "(sAMAccountName=*jsmith*)"
Enter LDAP Password: <password entered>
----

.ldapsearch output
----
dn: CN=John Smith,CN=Users,DC=swamp,DC=ad
objectClass: top
objectClass: person
objectClass: organizationalPerson
objectClass: user
cn: John Smith
sn: Smith
telephoneNumber: +1 555 5551234
givenName: John
distinguishedName: CN=John Smith,CN=Users,DC=swamp,DC=ad
instanceType: 4
whenCreated: 20161102135807.0Z
whenChanged: 20161103141526.0Z
displayName: John Smith
uSNCreated: 65515
memberOf: CN=Domain Admins,CN=Users,DC=swamp,DC=ad
uSNChanged: 66272
streetAddress:: MTIwNSBXLiBDbGFyayBTdC4NClVyYmFuYSwgSUwgNjE4MjE=
name: John Smith
objectGUID:: 4YwXKKIRxEOMD9BK4WaXGQ==
userAccountControl: 66048
badPwdCount: 0
codePage: 0
countryCode: 0
badPasswordTime: 131231177822233920
lastLogoff: 0
lastLogon: 131231177936769682
pwdLastSet: 131225686874147433
primaryGroupID: 513
objectSid:: AQUAAAAAAAUVAAAA7H5IDl2Zlbb2qCf1UgQAAA==
adminCount: 1
accountExpires: 9223372036854775807
logonCount: 1
sAMAccountName: jsmith
sAMAccountType: 805306368
userPrincipalName: jsmith@swamp.ad
objectCategory: CN=Person,CN=Schema,CN=Configuration,DC=swamp,DC=ad
dSCorePropagationData: 20161102144813.0Z
dSCorePropagationData: 16010101000000.0Z
lastLogonTimestamp: 131226561268705498
mail: jsmith@illinois.edu
----

.Corresponding `.env` entry
----
LDAP_ENABLED=true
LDAP_PASSWORD_VALIDATION=true
LDAP_READ_ONLY=true
LDAP_HOST=ldap://128.104.100.232
LDAP_PORT=389
LDAP_BASE_DN=cn=Users,dc=swamp,dc=ad
LDAP_USER_RDN_ATTR=cn
LDAP_SWAMP_UID_ATTR=userPrincipalName
LDAP_FIRSTNAME_ATTR=givenName
LDAP_LASTNAME_ATTR=sn
LDAP_FULLNAME_ATTR=cn
LDAP_PASSWORD_ATTR=userPassword
LDAP_USERNAME_ATTR=sAMAccountName
LDAP_EMAIL_ATTR=mail
LDAP_ORG_ATTR=ignore
LDAP_OBJECTCLASS=<not applicable, ldap is read-only>
LDAP_WEB_USER=ldapquery@swamp.ad
LDAP_WEB_USER_PASSWORD=<password here>
LDAP_PASSWORD_SET_USER=<not applicable, ldap is read-only>
LDAP_PASSWORD_SET_USER_PASSWORD=<not applicable, ldap is read-only>
----

.Notes

In the query response, you should see:

----
dn: CN=John Smith,CN=Users,DC=swamp,DC=ad
----

In this case, the `LDAP_USER_RDN_ATTR` is the key for the `cn=John Smith`
portion of the `dn`, and the `LDAP_BASE_DN` is the rest of the `dn` string.

The user "ldapquery@swamp.ad" was configured in the AD server to have read
access for the other users in the server. This was an out-of-band step.

We need a unique AD identifier to store in the local SWAMP database. In this
case, we configure `LDAP_SWAMP_UID_ATTR=userPrincipalName`, but any other
unique identifier could be used.

We want the user to enter "jsmith" for username/password, so we use
`LDAP_USERNAME_ATTR=sAMAccountName`.

Since `LDAP_HOST` is using `ldap://`, we configure `LDAP_PORT=389`
(insecure). Note that it is a bad idea to use an insecure LDAP protocol
since user passwords would be transmitted in the clear.
====


==== Other Considerations ====


===== Required Attributes =====

When the SWAMP creates new users, it will always populate the following:

    * SWAMP user UID
    * username
    * password
    * first name
    * last name
    * full name
    * email (unless email is disabled)

If you want to configure SWAMP-in-a-Box to be able to add and edit user
records in an LDAP/AD server, you must have a unique corresponding attribute
mapped for each of these values.

Similarly, if you have required attributes for user records in your LDAP/AD
server, each must be mappable to one of the above values. Otherwise, the
SWAMP will not be able to set them, and any attempt by the SWAMP to create
new user records will fail.

If email is a required attribute for your LDAP/AD server but you want to
configure SWAMP-in-a-Box with email disabled, you can map your email
attribute, and the SWAMP will populate that attribute with a space (" ")
when it creates new user records.

If you have more required attributes for your LDAP/AD server than the SWAMP
can accommodate, you should configure SWAMP-in-a-Box to access your LDAP/AD
server as read only.


===== Password Validation =====

If SWAMP-in-a-Box is configured for read-only access to the LDAP/AD server,
then the LDAP/AD server should validate passwords.

    * Set `LDAP_PASSWORD_VALIDATION=true`

If SWAMP-in-a-Box is configured to be able to add and edit records in the
LDAP/AD server, and your LDAP/AD server is configured to encrypt user
passwords itself, then the SWAMP should not encrypt passwords, and the
LDAP/AD server should validate passwords.

    * Set `APP_PASSWORD_ENCRYPTION_METHOD=NONE`

    * Set `LDAP_PASSWORD_VALIDATION=true`

If SWAMP-in-a-Box is configured to be able to add and edit records in the
LDAP/AD server, and your LDAP/AD server is not configured to encrypt user
passwords, then the SWAMP should handle password encryption and validation.

    * Set `APP_PASSWORD_ENCRYPTION_METHOD=BCRYPT`

    * Set `LDAP_PASSWORD_VALIDATION=false`


===== LDAP Size =====

If your LDAP/AD server has several thousand users, your SWAMP administrator
user many not be able to manage users. This is dependent on how the limits
on the LDAP/AD server are configured. If the server limits the number of
records that can be returned on a search, the SWAMP may receive only
a subset of users when asking for all users. This in turn affects the
"Review Accounts" page by causing it to show only a subset of the SWAMP's
users.
