#!/bin/bash

# This file is subject to the terms and conditions defined in
# 'LICENSE.txt', which is part of this source code distribution.
#
# Copyright 2012-2018 Software Assurance Marketplace

function exit_with_error() {
    echo "Error: Setup is NOT complete." 1>&2
    exit 1
}

function yum_downgrade() {
    echo "Downgrading: $*"
    yum -y downgrade "$@"
}

function yum_erase() {
    echo "Erasing: $*"
    yum -y erase "$@"
}

function yum_install() {
    echo "Installing: $*"
    yum -y install "$@"
}

function yum_update() {
    echo "Updating: $*"
    yum -y update "$@"
}

function yum_confirm() {
    encountered_not_installed=0
    for pkg in "$@" ; do
        echo -n "Checking for '$pkg' ... "
        if ! rpm -q --whatprovides "$pkg" ; then
            encountered_not_installed=1
        fi
    done
    return $encountered_not_installed
}

function get_os_dist() {
    if [ -r /etc/centos-release ]; then
        echo "CentOS Linux"
        return 0
    fi
    if [ -r /etc/redhat-release ]; then
        echo "Red Hat Linux"
        return 0
    fi
    echo "Unknown"
    return 1
}

function get_os_ver() {
    if [ -r /etc/centos-release ]; then
        awk '{ print substr($0, match($0, /[[:digit:]]+/), RLENGTH); }' /etc/centos-release
        return 0
    fi

    if [ -r /etc/redhat-release ]; then
        awk '{ print substr($0, match($0, /[[:digit:]]+/), RLENGTH); }' /etc/redhat-release
        return 0
    fi
    echo "Unknown"
    return 1
}

function check_os_dist_and_ver() {
    if [ "$SWAMP_CHECK_OS_DIST_AND_VER" = "done" ]; then
        return 0
    fi

    distribution=$(get_os_dist)
    version=$(get_os_ver)

    echo "We appear to be running on: $distribution $version"

    case "$distribution $version" in
        "CentOS Linux 6")
            ;;
        "CentOS Linux 7")
            ;;
        "Red Hat Linux 6")
            ;;
        "Red Hat Linux 7")
            ;;
        *)
            echo "Warning: This set up script might not work for $distribution $version."
            echo -n "Continue anyway? [N/y] "
            read ANSWER
            if [ "$ANSWER" != "y" ]; then
                return 1
            fi
            ;;
    esac

    export SWAMP_CHECK_OS_DIST_AND_VER="done"
    return 0
}

function check_os_dist_upgrade() {
    if [ "$SWAMP_OS_DIST_UPGRADE" = "done" ]; then
        return 0
    fi

    for release_pkg in centos-release redhat-release-server ; do
        if rpm -q --whatprovides "$release_pkg" 1>/dev/null 2>/dev/null ; then
            if [ "$SWAMP_YUM_MAKECACHE" != "done" ]; then
                echo ""
                echo "Running 'yum makecache' ..."
                yum makecache
                export SWAMP_YUM_MAKECACHE="done"
            fi

            echo ""
            echo "Running 'yum check-update $release_pkg' ..."
            yum check-update "$release_pkg" 1>/dev/null 2>/dev/null
            ok=$?

            if [ $ok -eq 100 ]; then
                echo ""
                echo "Warning: The '$release_pkg' package is out of date."
                echo "This probably means that a significant update is available."
                echo ""
                echo "Running this setup script might cause inconsistent versions"
                echo "of various packages to be installed on the system that yum/rpm"
                echo "might not warn about."
                echo ""
                echo "Consider running 'yum update' first, before continuing with"
                echo "this script."
                echo ""
                echo -n "Continue anyway? [N/y] "
                read ANSWER
                if [ "$ANSWER" != "y" ]; then
                    return 1
                fi
            elif [ $ok -ne 0 ]; then
                echo ""
                echo "Error: Failed to run 'yum check-update $release_pkg'." 1>&2
                echo "Perhaps check that repositories are configured correctly." 1>&2
                return 1
            fi
        fi
    done

    export SWAMP_OS_DIST_UPGRADE="done"
    return 0
}

function check_user() {
    if [ "$SWAMP_CHECK_USER" = "done" ]; then
        return 0
    fi

    if [ "$(whoami)" != "root" ]; then
        echo "Error: This set up script must be run as 'root'. Perhaps use 'sudo'." 1>&2
        return 1
    fi

    for prog in rpm yum cp ln useradd; do
        echo -n "Checking for '$prog' ... "
        which $prog
        if [ $? -ne 0 ]; then
            echo "Error: '$prog' is not found in $USER's path." 1>&2
            return 1
        fi
    done

    export SWAMP_CHECK_USER="done"
    return 0
}

function compare_versions() {

    # Assumes version strings of the form X.Y.Z,
    # where X, Y, and Z are all non-negative integers.
    #
    # Return 0 if $1 < $2.
    # Return 1 if $1 = $2.
    # Return 2 if $1 > $2.

    IFS=. first=($1)
    IFS=. second=($2)

    for i in 0 1 2; do
        x=${first[$i]}
        y=${second[$i]}

        if [ ! -z "$x" ] && [ ! -z "$y" ]; then
            if [ "$x" -lt "$y" ]; then
                return 0
            fi
            if [ "$x" -gt "$y" ]; then
                return 2
            fi
        fi
    done

    return 1
}
