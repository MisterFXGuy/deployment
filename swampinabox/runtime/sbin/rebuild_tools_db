#!/bin/bash

# This file is subject to the terms and conditions defined in
# 'LICENSE.txt', which is part of this source code distribution.
#
# Copyright 2012-2018 Software Assurance Marketplace

#
# Rebuild the "tools" tables in the database.
#

encountered_error=0
trap 'encountered_error=1; echo "Error: $0: $BASH_COMMAND" 1>&2' ERR
set -o errtrace

if [ "$(whoami)" != "root" ]; then
    echo "Error: $0: This utility must be run as 'root'. Perhaps use 'sudo'." 1>&2
    exit 1
fi

############################################################################

SWAMP_CONTEXT="$1"

source /opt/swamp/sbin/db_support.functions
trap 'remove_mysql_options_file; stop_mysql_service; exit 1' INT TERM

start_mysql_service
create_mysql_options_file

############################################################################

tool_scripts_dirs=""
tool_add_on_scripts_dir="/opt/swamp/sql/tools_add_on"

tool_install_script="/opt/swamp/sql/util/tool_install.sql"
tool_remove_all_script=""

if [ "$SWAMP_CONTEXT" = -distribution ]; then

    tool_scripts_dirs="/opt/swamp/sql/tools"
    tool_remove_all_script="/opt/swamp/sql/util/delete_non_user_tools.sql"

elif [ "$SWAMP_CONTEXT" = "-singleserver" -o "$SWAMP_CONTEXT" = "-mir-swamp" ]; then

    tool_scripts_dirs="/opt/swamp/sql/tools /opt/swamp/sql/tools_other"
    tool_remove_all_script="/opt/swamp/sql/util/delete_all_tools.sql"

else

    echo "Error: $0: Unknown or missing SWAMP context: $SWAMP_CONTEXT" 1>&2
    exit 1

fi

############################################################################

echo "Removing existing bundled tools from the database"

if ! $mysql_command < "$tool_remove_all_script" ; then

    echo "Error: $0: Failed to remove existing tools from the database" 1>&2
    encountered_error=1

fi

############################################################################

echo "Adding bundled tools for the current release to the database"

for dir in $tool_scripts_dirs ; do
    for tool_params_script in "$dir"/*.sql ; do

        tool=$(basename "$tool_params_script" .sql)
        params_sql=$(cat "$tool_params_script")
        install_sql=$(cat "$tool_install_script")

        echo ".. Adding: $tool"

        if ! $mysql_command <<< "$params_sql ; $install_sql" ; then

            echo "Error: $0: Failed to add: $tool" 1>&2
            encountered_error=1

        fi
    done
done

############################################################################

echo "Populating metadata into the database for all tools"

if ! $mysql_command < "/opt/swamp/sql/populate_tool_metadata.sql" ; then

    echo "Error: $0: Failed to populate metadata into the database" 1>&2
    encountered_error=1

fi

############################################################################

echo "Populating additional metadata into the database for add-on tools"

for tool_meta_script in "$tool_add_on_scripts_dir"/*.meta.sql ; do

    tool=$(basename "$tool_meta_script" .meta.sql)
    params_sql=$(cat "$tool_add_on_scripts_dir/$tool.sql")
    metadata_sql=$(cat "$tool_meta_script")

    tool_version_uuids=$($mysql_command -B -N <<< "$params_sql ; select tool_version_uuid from tool_shed.tool_version where tool_uuid = @tool_uuid ;")

    if [ ! -z "$tool_version_uuids" ]; then
        while read -r tool_version_uuid ; do
            escaped_tool_version_uuid="$tool_version_uuid"
            escaped_tool_version_uuid="${escaped_tool_version_uuid//\'/\'\'/}"
            escaped_tool_version_uuid="${escaped_tool_version_uuid//\\/\\\\/}"

            echo ".. Adding: $tool (version UUID: $tool_version_uuid)"

            if ! $mysql_command <<< "$params_sql ; set @tool_version_uuid = '$escaped_tool_version_uuid' ; $metadata_sql" ; then

                echo "Error: $0: Failed to add additional metadata for: $tool" 1>&2
                encountered_error=1

            fi
        done <<< "$tool_version_uuids"
    fi
done

############################################################################

remove_mysql_options_file
stop_mysql_service

exit $encountered_error
