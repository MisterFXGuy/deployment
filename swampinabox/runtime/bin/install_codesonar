#!/opt/perl5/perls/perl-5.18.1/bin/perl

# This file is subject to the terms and conditions defined in
# 'LICENSE.txt', which is part of this source code distribution.
#
# Copyright 2012-2017 Software Assurance Marketplace

#
# Install CodeSonar on a SWAMP-in-a-Box.
#

use utf8;
use strict;
use warnings;

use English qw( -no_match_vars );
use File::Basename;
use Getopt::Long;
use Socket;

use File::Slurp qw(read_file write_file);

#
# These DB-related constants shouldn't ever be configurable by the user.
#
#   - We need to be able to clean up the password file.
#   - We need to be able to parse the output from a query.
#
my $sql_options_dir   = '/opt/swamp/sql';
my $sql_options_file  = qq($sql_options_dir/sql.cnf);
my $mysql_command     = qq(mysql --defaults-file="$sql_options_file" -B -N);

#
# Track temporary files that need to be deleted before exiting.
#
my @temp_objects = ($sql_options_file);

############################################################################

#
# Execute the given command, and return all its output and its status code.
#
sub do_command {
    my ($cmd) = @_;

    my $output = qx{$cmd 2>&1};  # capture both standard out and standard error
    my $status = $CHILD_ERROR;

    return ($output, $status);
}

#
# Return the given string without leading and trailing whitespace.
#
sub trim {
    my ($val) = @_;
    if ($val) {
        $val =~ s/^\s+|\s+$//gm;
    }
    return $val;
}

#
# Backslash escape all double quotes in the given string.
#
sub escape_dquotes {
    my ($val) = @_;
    if ($val) {
        $val =~ s/"/\\"/g;
    }
    return $val;
}

#
# Backslash escape all single quotes in the given string.
#
sub escape_squotes {
    my ($val) = @_;
    if ($val) {
        $val =~ s/'/\\'/g;
    }
    return $val;
}

############################################################################

#
# Toggle the terminal's 'echo' property.
#
sub toggle_terminal_echo {
    my ($enable) = @_;
    my $echo_option = $enable ? 'echo' : '-echo';
    my $stty_command = qq(stty $echo_option);

    my ($output, $status) = do_command($stty_command);
    if ($status) {
        exit_abnormally("Failed to set terminal echo using '$stty_command'", $output);
    }
}

#
# Remove temporary files and directories.
#
sub remove_temp_objects {
    my $object = pop @temp_objects;
    while ( $object ) {
        if ( -f $object ) {
            unlink $object || print "ERROR: Failed to remove file: '$object'\n";
        }
        elsif ( -d $object ) {
            rmdir $object || print "ERROR: Failed to remove directory: '$object'\n";
        }
        elsif ( -e $object ) {
            print "ERROR: Not sure how to remove: '$object'\n";
        }
        $object = pop @temp_objects;
    }
    if ( scalar @temp_objects > 0 ) {
        print "ERROR: Failed to process all temporary objects\n";
    }
}

#
# Perform all necessary cleanup tasks (e.g., before exiting).
#
sub do_cleanup {
    remove_temp_objects();
}

#
# Make sure cleanup tasks happen even on common signals.
#
$SIG{INT} = sub { do_cleanup(); toggle_terminal_echo(1); exit 1; };
$SIG{TERM} = sub { do_cleanup(); toggle_terminal_echo(1); exit 1; };

############################################################################

sub exit_normally {
    do_cleanup();
    exit 0;
}

sub exit_abnormally {
    my ($message, $details) = @_;

    $message = trim($message);
    $details = trim($details);

    if ($message) {
        print "Error: $message" . ($details ? " ($details)" : q()) . "\n";
    }

    do_cleanup();
    exit 1;
}

sub show_usage_and_exit {
    my $usage_message = <<"EOF";
Usage: $PROGRAM_NAME [options]

Manage the versions of GrammaTech CodeSonar installed on this host.

Options:

  --add, --install              Install a new version of CodeSonar
  --remove                      Remove a version of CodeSonar
  --replace                     Replace an existing version of CodeSonar
  --configure                   Configure the CodeSonar license server to use

  --tool-version, -v            CodeSonar version to modify (e.g., '4.4p0')
  --tool-archive, -f            Path to the 'gt-csonar-{version}.tar.gz' file

  --license-server-host, -h     The CodeSonar license server's hostname
  --license-server-port, -p     The port to connect to on the license server
  --limit                       The max number of concurrent CodeSonar assessments

  --help, -?                    Display this message

EOF

    print $usage_message;
    exit_abnormally();
}

############################################################################

sub get_options {
    my @errors = ();
    my %options = ();

    my %defaults = (
        # Where to find various configuration files
        'condor-limits-file'   => '/etc/condor/config.d/swampinabox_90_concurrency_limits.conf',
        'swamp-conf-file'      => '/opt/swamp/etc/swamp.conf',
        'web-env-file'         => '/var/www/swamp-web-server/.env',

        # Where to find supporting SQL scripts
        'tool-install-sql'     => '/opt/swamp/sql/util/tool_install.sql',
        'tool-uninstall-sql'   => '/opt/swamp/sql/util/tool_uninstall.sql',
        'tool-scripts-dir'     => '/opt/swamp/sql/tools_add_on',

        # Where to put the tool archive
        'tool-install-dir'     => '/swamp/store/SCATools/add_on',

        # Other assorted constants
        'gt-csonar-tool-uuid'  => '5540d2be-72b2-11e5-865f-001a4a81450b',
        'gt-csonar-sql'        => '/opt/swamp/sql/tools_add_on/gt-csonar.sql',
        );

    my $ok = Getopt::Long::GetOptions(\%options,
                'help|?',
                'add|install',
                'remove',
                'replace',
                'configure',
                'tool-version|v=s',
                'tool-archive|f=s',
                'license-server-host|h=s',
                'license-server-port|p=i',
                'limit=i',
                );

    while (my ($key, $value) = each %defaults) {
        if (! exists $options{$key}) {
            $options{$key} = $value;
        }
    }

    my $mode_count = 0;
    $mode_count += (defined $options{'add'}       ? 1 : 0);
    $mode_count += (defined $options{'remove'}    ? 1 : 0);
    $mode_count += (defined $options{'replace'}   ? 1 : 0);
    $mode_count += (defined $options{'configure'} ? 1 : 0);

    if ($ok && $options{'help'}) {
        show_usage_and_exit();
    }
    if ($mode_count != 1) {
        push @errors, 'Must specify exactly one of the following options: add remove replace configure';
    }
    if (! defined $options{'tool-version'} && $mode_count == 1 && ! defined $options{'configure'}) {
        push @errors, 'Required option missing: tool-version';
    }
    if (! defined $options{'tool-archive'} && (defined $options{'add'} || defined $options{'replace'})) {
        push @errors, 'Required option missing: tool-archive';
    }
    if (! defined $options{'license-server-host'} && defined $options{'configure'}) {
        push @errors, 'Required option missing: license-server-host';
    }
    if (! defined $options{'license-server-port'} && defined $options{'configure'}) {
        push @errors, 'Required option missing: license-server-port';
    }
    if (! defined $options{'limit'} && defined $options{'configure'}) {
        push @errors, 'Required option missing: limit';
    }


    my $tool_archive = $options{'tool-archive'};
    my $tool_version = $options{'tool-version'};
    if ($tool_archive && $tool_version) {  # No need for these warnings if the options were not provided
        my $tool_archive_file = basename($tool_archive);

        if (! -f $tool_archive) {
            push @errors, "Tool archive file not found: $tool_archive";
        }
        elsif (! ($tool_archive_file =~ m/^gt-csonar-${tool_version}\.tar\.gz$/)) {
            push @errors, "Tool archive file does not look like: gt-csonar-${tool_version}.tar.gz";
        }
    }

    my $license_server_host = $options{'license-server-host'} || q();
    my $license_server_ip = inet_aton($license_server_host);
    if ($license_server_host && ! $license_server_ip) {  # No need for this warning if the host was not provided
        push @errors, "Unable to determine IP address of license server host: $license_server_host";
    }

    for my $key (qw(condor-limits-file swamp-conf-file web-env-file tool-install-sql tool-uninstall-sql gt-csonar-sql)) {
        my $val = $options{$key};
        if (! defined $val || ! -f $val) {
            push @errors, "Missing file from SWAMP installation: $val";
        }
    }

    for my $key (qw(tool-scripts-dir tool-install-dir)) {
        my $val = $options{$key};
        if (! defined $val || ! -d $val) {
            push @errors, "Missing directory from SWAMP installation: $val";
        }
    }

    if (! -d $sql_options_dir) {
        push @errors, "Missing directory from SWAMP installation: $sql_options_dir";
    }

    for my $msg (@errors) {
        print $msg . "\n";
    }

    if (! $ok || scalar @errors > 0) {
        print "\n";
        show_usage_and_exit();
    }

    return \%options;
}

############################################################################

sub check_running_as_root {
    my $whoami = trim(qx(whoami));

    if ($whoami ne 'root') {
        exit_abnormally(q(Not running as 'root' (try using 'sudo'?)));
    }
}

sub check_system_requirements {
    my ($options) = @_;

    my $tool_uuid          = $options->{'gt-csonar-tool-uuid'};
    my $tool_version       = $options->{'tool-version'};
    my $tool_version_uuid  = get_tool_version_uuid($options, $tool_uuid, $tool_version);

    if (defined $options->{'add'} && $tool_version_uuid) {
        exit_abnormally("GrammaTech CodeSonar $tool_version already appears to be installed");
    }

    if (defined $options->{'replace'} && ! $tool_version_uuid) {
        exit_abnormally("GrammaTech CodeSonar $tool_version does not appear to be installed");
    }
}

############################################################################

#
# Get the credentials for accessing the DB from the backend web server's config.
#
sub get_db_credentials {
    my ($options) = @_;
    my $prompt = q(Enter database 'root' password: );
    my $password = q();
    my $valid_password = 0;

    while ( ! $valid_password ) {
        print $prompt;
        toggle_terminal_echo(0);
        $password = <>;
        toggle_terminal_echo(1);
        print "\n";
        chomp $password;

        $options->{'db-username'} = 'root';
        $options->{'db-password'} = $password;

        create_sql_options_file($options);

        my ($output, $status) = do_command(qq(echo "\\q" | $mysql_command));
        if ($status) {
            print "$output\n";
        }
        else {
            $valid_password = 1;
        }
    }
}

#
# Create the password file for accessing the DB.
#
sub create_sql_options_file {
    my ($options) = @_;

    if ( ! $options->{'db-username'} || ! $options->{'db-password'} ) {
        get_db_credentials($options);
    }

    my $username = $options->{'db-username'};
    my $password = $options->{'db-password'};

    #
    # In the options file for MySQL:
    #   - Quote the password, in case it contains '#'.
    #   - Escape backslashes (the only character that needs escaping).
    #
    # See: http://dev.mysql.com/doc/refman/5.7/en/option-files.html
    #
    $username =~ s/\\/\\\\/g;
    $password =~ s/\\/\\\\/g;

    my $sql_options = <<"EOF";
[client]
user='$username'
password='$password'
EOF

    #
    # Make sure the created file is not publicly readable.
    #
    write_file($sql_options_file, q());
    chmod 0600, $sql_options_file
        || exit_abnormally("Failed to set permissions on '$sql_options_file'");

    write_file($sql_options_file, $sql_options);
    chmod 0400, $sql_options_file;
}

#
# Return the result of executing the given SQL query/statement.
#
sub get_sql_query_results {
    my ($options, $query) = @_;

    create_sql_options_file($options);

    my $escaped_query = escape_dquotes($query);
    my ($output, $status) = do_command(qq(echo "$escaped_query" | $mysql_command));

    if ($status) {
        exit_abnormally("Failed to execute SQL query ($query)", $output);
    }

    return trim($output);
}

############################################################################

#
# Return a UUID as generated by the DB.
#
sub generate_uuid {
    my ($options) = @_;
    return get_sql_query_results($options, q(set @val = uuid(); select @val));
}

#
# Return the SHA512 checksum for the given file.
#
sub generate_sha512_checksum {
    my ($file) = @_;

    my $escaped_file = escape_dquotes($file);
    my ($output, $status) = do_command(qq(sha512sum "$escaped_file"));

    if ($status) {
        exit_abnormally("Failed to compute SHA512 checksum for '$file'", $output);
    }

    my @pieces = split /\s+/, trim($output);

    return $pieces[0];
}

#
# Return the tool version UUID, if any, for the given tool and version string.
#
sub get_tool_version_uuid {
    my ($options, $tool_uuid, $version_string) = @_;

    $tool_uuid       ||= $options->{'gt-csonar-tool-uuid'}  || q();
    $version_string  ||= $options->{'tool-version'}         || q();

    my $escaped_tool_uuid       = escape_squotes($tool_uuid);
    my $escaped_version_string  = escape_squotes($version_string);

    my $query    = qq(select tool_version_uuid from tool_shed.tool_version where tool_uuid = '$escaped_tool_uuid' and version_string = '$escaped_version_string');
    my $results  = get_sql_query_results($options, $query);

    my ($tool_version_uuid) = split /^/, $results;
    $options->{'tool-version-uuid'} = $tool_version_uuid;
    return $tool_version_uuid;
}

############################################################################

#
# Add/remove/replace the CodeSonar tool archive file.
#
sub update_tool_archive {
    my ($options) = @_;

    if ($options->{'add'} || $options->{'replace'}) {
        my $tool_archive      = $options->{'tool-archive'};
        my $tool_install_dir  = $options->{'tool-install-dir'};

        print "Installing '$tool_archive' in '$tool_install_dir'\n";

        my $escaped_tool_archive      = escape_dquotes($tool_archive);
        my $escaped_tool_install_dir  = escape_dquotes($tool_install_dir);
        my ($output, $status)         = do_command(qq(install -m 644 -o root -g root "$escaped_tool_archive" "$escaped_tool_install_dir"));

        if ($status) {
            exit_abnormally("Failed to install '$tool_archive' in '$tool_install_dir'", $output)
        }
    }

    if ($options->{'remove'}) {
        my $tool_install_dir  = $options->{'tool-install-dir'};
        my $tool_version      = $options->{'tool-version'};
        my $tool_archive      = "gt-csonar-${tool_version}.tar.gz";
        my $file_to_remove    = "$tool_install_dir/$tool_archive";

        if ( -f "$file_to_remove" ) {
            print "Removing '$tool_archive' from '$tool_install_dir'\n";

            if ( ! unlink "$file_to_remove" ) {
                print "WARNING: Failed to remove '$file_to_remove'\n";
            }
        }
    }
}

#
# Update the CodeSonar license server configuration.
#
sub update_swamp_config {
    my ($options) = @_;

    return if ! $options->{'configure'};

    my $swamp_conf_file = $options->{'swamp-conf-file'};
    my $host = $options->{'license-server-host'};
    my $port = $options->{'license-server-port'};

    my $condor_limits_file = $options->{'condor-limits-file'};
    my $limit = $options->{'limit'};

    print "Updating license server configuration in '$swamp_conf_file' ($host, port $port)\n";

    my $swamp_config = read_file($swamp_conf_file);
    $swamp_config =~ s/^\s*tool\.gt-csonar\.license\.host\s*=.*$/tool.gt-csonar.license.host = $host/gm;
    $swamp_config =~ s/^\s*tool\.gt-csonar\.license\.port\s*=.*$/tool.gt-csonar.license.port = $port/gm;
    write_file($swamp_conf_file, $swamp_config);

    print "Updating HTCondor concurrency limits in '$condor_limits_file' (new limit: $limit)\n";
    my $condor_limits = read_file($condor_limits_file);
    $condor_limits =~ s/^\s*GRAMMATECHCS_LIMIT\s*=.*$/GRAMMATECHCS_LIMIT = $limit/gmi;
    write_file($condor_limits_file, $condor_limits);

    print "Instructing HTCondor daemons to reconfigure themselves\n";
    my ($output, $status) = do_command('condor_reconfig');
    if ($status) {
        exit_abnormally("Failed to reconfigure HTCondor daemons", $output);
    }
}

#
# Add/remove/replace the CodeSonar database entries.
#
sub update_database {
    my ($options) = @_;
    my $tool_version_uuid = $options->{'tool-version-uuid'};

    return if ! ($options->{'add'} || $options->{'remove'} || $options->{'replace'});
    return if ($options->{'remove'}  && ! $tool_version_uuid);
    return if ($options->{'replace'} && ! $tool_version_uuid);

    print "Updating database entries\n";

    my $tool_install_dir    = $options->{'tool-install-dir'};
    my $tool_archive        = $options->{'tool-archive'};
    my $tool_archive_file   = $tool_archive ? basename($tool_archive) : q();
    my $tool_version        = $options->{'tool-version'};
    my $gt_csonar_sql       = $options->{'gt-csonar-sql'};
    my $checksum            = q();
    my $tool_script_sql     = q();

    if ($tool_archive) {
        $checksum = generate_sha512_checksum($tool_archive);
    }
    if ($options->{'add'}) {
        $tool_version_uuid = generate_uuid($options);
    }
    if ($options->{'add'} || $options->{'replace'}) {
        $tool_script_sql = $options->{'tool-install-sql'};
    }
    if ($options->{'remove'}) {
        $tool_script_sql = $options->{'tool-uninstall-sql'};
    }

    my $escaped_tool_version       = escape_squotes($tool_version);
    my $escaped_tool_version_uuid  = escape_squotes($tool_version_uuid);
    my $escaped_tool_install_dir   = escape_squotes($tool_install_dir);
    my $escaped_tool_archive_file  = escape_squotes($tool_archive_file);
    my $escaped_checksum           = escape_squotes($checksum);

    my $tool_params = <<"EOF";
set \@tool_version_uuid  = '${escaped_tool_version_uuid}';
set \@version_string     = '${escaped_tool_version}';
set \@tool_path          = '${escaped_tool_install_dir}/${escaped_tool_archive_file}';
set \@checksum           = '${escaped_checksum}';
EOF

    #
    # The internal version number is automatically computed on the initial
    # insert but must be fed back in on an update.
    #
    if ($options->{'replace'}) {
        $tool_params .= "\nset \@version_no = (select version_no from tool_shed.tool_version where tool_version_uuid = '$escaped_tool_version_uuid');\n";
    }

    my $gt_csonar_params     = read_file($gt_csonar_sql);
    my $tool_script          = read_file($tool_script_sql);
    my $complete_sql_script  = $tool_params . $gt_csonar_params . $tool_script;
    my $ignore_results       = get_sql_query_results($options, $complete_sql_script);
}

############################################################################

sub main {
    my $options = get_options();

    check_running_as_root($options);
    check_system_requirements($options);
    update_swamp_config($options);
    update_tool_archive($options);
    update_database($options);

    #
    # Indicate that the script has completed normally.
    #
    my $tool_version = $options->{'tool-version'};

    if ($options->{'add'}) {
        print "GrammaTech CodeSonar $tool_version has been added\n";
    }
    if ($options->{'remove'}) {
        print "GrammaTech CodeSonar $tool_version has been removed\n";
    }
    if ($options->{'replace'}) {
        print "GrammaTech CodeSonar $tool_version has been updated\n";
    }
    if ($options->{'configure'}) {
        print "License server and concurrency limits for GrammaTech CodeSonar have been configured\n";
    }
}

main();
exit_normally();
