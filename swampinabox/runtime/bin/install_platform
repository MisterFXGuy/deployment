#!/bin/bash

# This file is subject to the terms and conditions defined in
# 'LICENSE.txt', which is part of this source code distribution.
#
# Copyright 2012-2017 Software Assurance Marketplace

#
# Install a VM disk image as a new platform for assessments.
#

mysql_cnf_file="/opt/swamp/sql/sql.cnf"
mysql_passwd_file="/etc/.mysql_root"
platforms_image_dest="/swamp/platforms/images"
platforms_script_root="/opt/swamp/sql"

vm_image_src="$1"
vm_image_dest="$platforms_image_dest/$(basename "$vm_image_src")"
platform=$(basename "$vm_image_src")
platform="${platform//condor-/}"
platform="${platform//-master*/}"

function do_clean_up {
    stty echo
    rm -f "$mysql_cnf_file"
    rm -f "$mysql_passwd_file"
}

function exit_normally {
    do_clean_up
    exit 0
}

function exit_with_error {
    do_clean_up
    echo "$0: Error while attempting to install $vm_image_src"
    exit 1
}

#
# Ensure that temporary files get removed.
#
trap 'exit_with_error' INT TERM

##########################################################################

ask_pass() {
    PROMPT=$1
    if [ "$2" = "-confirm" ]; then NEED_CONFIRM=1; else NEED_CONFIRM=0; fi
    NEED_PASSWORD=1

    while [ "$NEED_PASSWORD" -eq 1 ]; do
        ANSWER=""
        CONFIRMATION=""

        read -r -e -s -p "$PROMPT " ANSWER
        echo

        if [ -z "$ANSWER" ]; then
            echo "*** Password cannot be empty. ***"
        else
            if [ "$NEED_CONFIRM" -eq 1 ]; then
                stty -echo
                echo -n "Retype password: "
                read -r CONFIRMATION
                echo
                stty echo

                if [ "$ANSWER" != "$CONFIRMATION" ]; then
                    echo "*** Passwords do not match. ***"
                else
                    NEED_PASSWORD=0
                fi
            else
                NEED_PASSWORD=0
            fi
        fi
    done
}

function test_db_password {
    username="$1"
    password="$2"

    #
    # In the options file for MySQL:
    #   - Quote the password, in case it contains '#'.
    #   - Escape backslashes (the only character that needs escaping).
    #
    # See: http://dev.mysql.com/doc/refman/5.7/en/option-files.html
    #
    password=${password//\\/\\\\}

    echo '[client]' > "$mysql_cnf_file"
    chmod 400 "$mysql_cnf_file"
    echo "password='$password'" >> "$mysql_cnf_file"
    echo "user='$username'" >> "$mysql_cnf_file"

    mysql --defaults-file="$mysql_cnf_file" <<< ';'
    success=$?

    rm -f "$mysql_cnf_file"

    if [ $success -ne 0 ]; then
        echo "Error: Failed to log into the database as $username"
        return 1
    fi

    return 0
}

##########################################################################

if [ -z "$vm_image_src" ]; then
    echo "Usage: $0 <VM platform .qcow2 or .qcow2.gz file>"
    exit 1
fi

if [ ! -r "$vm_image_src" ]; then
    echo "Error: $vm_image_src is not readable"
    exit 1
fi

if [[ !("$vm_image_src" =~ .qcow2$) && !("$vm_image_src" =~ .qcow2.gz$) ]]; then
    echo "Error: $vm_image_src does not look like a .qcow2 or .qcow.gz file"
    exit 1
fi

echo "$(basename "$vm_image_src") looks like the following platform: $platform"

if [ ! -e "$platforms_script_root/$platform.sql" ]; then
    echo "Error: $platform is not recognized as an installable platform"
    exit 1
fi

if [ "$(whoami)" != "root" ]; then
    echo "Error: The install must be performed as root."
    exit 1
fi

##########################################################################

success=1
while [ $success -ne 0 ]; do
    ask_pass "Enter database root password:"
    DBROOT=$ANSWER

    test_db_password root "$DBROOT"
    success=$?
done

##########################################################################

if [[ "$vm_image_src" =~ .qcow2$ ]]; then
    echo "Copying $(basename "$vm_image_src") to $platforms_image_dest"

    # echo src: "$vm_image_src"
    # echo dest: "$vm_image_dest"

    cp    "$vm_image_src" "$vm_image_dest" || exit_with_error
    chown root:root       "$vm_image_dest" || exit_with_error
    chmod 644             "$vm_image_dest" || exit_with_error
fi

if [[ "$vm_image_src" =~ .gz$ ]]; then
    echo "Unzipping $(basename "$vm_image_src") into $platforms_image_dest"

    vm_image_dest=${vm_image_dest%%.gz}

    # echo src: "$vm_image_src"
    # echo dest: "$vm_image_dest"

    gunzip -c "$vm_image_src" > "$vm_image_dest" || exit_with_error
    chown root:root  "$vm_image_dest" || exit_with_error
    chmod 644        "$vm_image_dest" || exit_with_error
fi

##########################################################################

echo "Updating database records"

echo "$DBROOT" | sudo openssl enc -aes-256-cbc -salt -out "$mysql_passwd_file" -pass pass:swamp
chmod 400 "$mysql_passwd_file"
/opt/swamp/sbin/execute_sql_script "$platforms_script_root/$platform.sql" || exit_with_error
rm -f "$mysql_passwd_file"

##########################################################################

echo ""
echo "$platform should now be available for performing assessments"

exit_normally
