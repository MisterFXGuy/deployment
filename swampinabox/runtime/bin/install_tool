#!/opt/perl5/perls/perl-5.18.1/bin/perl

# This file is subject to the terms and conditions defined in
# 'LICENSE.txt', which is part of this source code distribution.
#
# Copyright 2012-2018 Software Assurance Marketplace

#
# Install an add-on tool on a SWAMP-in-a-Box.
#

#
# For 'perlcritic'.
#
## no critic (MagicNumbers, RequireDotMatchAnything, RequireLineBoundaryMatching, RequireExtendedFormatting)

use utf8;
use strict;
use warnings;

use English qw( -no_match_vars );
use File::Basename;
use Getopt::Long;
use POSIX qw(strftime);
use Socket;

use File::Slurp qw(read_file write_file);

#
# These DB-related constants shouldn't ever be configurable by the user:
#
#   - We need to be able to clean up the password file.
#   - We need to be able to parse the output from a query.
#
my $sql_options_dir  = '/opt/swamp/sql';
my $sql_options_file = qq($sql_options_dir/sql.cnf);
my $mysql_command    = qq(mysql --defaults-file="$sql_options_file" -B -N);

#
# Track temporary files that need to be deleted before exiting.
#
my @temp_objects = ($sql_options_file);

############################################################################

#
# Execute the given command, and return all its output and its status code.
#
sub do_command {
    my ($cmd)  = @_;
    my $output = qx($cmd 2>&1);    # capture both standard out and standard error
    my $status = $CHILD_ERROR;
    return ($output, $status);
}

#
# Return the given string without leading and trailing whitespace.
#
sub trim {
    my ($val) = @_;
    if ($val) {
        $val =~ s/^\s+|\s+$//g;
    }
    return $val;
}

#
# Backslash escape all double quotes in the given string.
#
sub escape_dquotes {
    my ($val) = @_;
    if ($val) {
        $val =~ s/"/\\"/g;
    }
    return $val;
}

#
# Backslash escape all single quotes in the given string.
#
sub escape_squotes {
    my ($val) = @_;
    if ($val) {
        $val =~ s/'/\\'/g;
    }
    return $val;
}

#
# Create a backup copy of the given file.
#
sub backup_file {
    my ($filename) = @_;
    my $current_datetime = strftime('%Y%m%d%H%M%S', localtime);
    my $old_filename     = escape_dquotes(qq($filename));
    my $new_filename     = escape_dquotes(qq($filename.$current_datetime));
    my ($output, $status) = do_command(qq(cp -p "$old_filename" "$new_filename"));
    if ($status) {
        exit_abnormally("Failed to create backup copy of: $filename", $output);
    }
    return;
}

#
# Get the value for a key in the given string of "key = value" pairs.
#
sub get_key_val {
    my ($config, $key) = @_;
    my $escaped_key = quotemeta $key;

    my @vals = ($config =~ /^[ \t]*$escaped_key[ \t]*=(.*)$/m);
    return $vals[0];
}

#
# Add/update a key-value pair in the given string of "key = value" pairs.
#
sub merge_key_val {
    my ($config, $key, $val, $no_space) = @_;
    my $escaped_key       = quotemeta $key;
    my $contains_key      = ($config =~ /^[ \t]*$escaped_key[ \t]*=/m);
    my $ends_with_newline = ($config =~ /\n$/);
    my $space             = ($no_space ? q() : q( ));
    $val                  = ($no_space ? $val : trim($val));

    if ($contains_key) {
        $config =~ s/^[ \t]*$escaped_key[ \t]*=.*$/$key$space=$space$val/gm;
    }
    else {
        $config .= ($ends_with_newline ? q() : qq(\n)) . "$key$space=$space$val\n";
    }
    return $config;
}

############################################################################

#
# Toggle the terminal's 'echo' property.
#
sub toggle_terminal_echo {
    my ($enable) = @_;
    my $echo_option = $enable ? 'echo' : '-echo';

    my ($output, $status) = do_command(qq(stty $echo_option));
    if ($status) {
        exit_abnormally(q(Failed to set terminal 'echo' property), $output);
    }
    return;
}

#
# Remove temporary files and directories.
#
sub remove_temp_objects {
    my $object = pop @temp_objects;
    while ($object) {
        if (-f $object) {
            unlink $object || print "Error: Failed to remove file: $object\n";
        }
        elsif (-d $object) {
            rmdir $object || print "Error: Failed to remove directory: $object\n";
        }
        elsif (-e $object) {
            print "Error: Not sure how to remove: $object\n";
        }
        $object = pop @temp_objects;
    }
    if (scalar @temp_objects > 0) {
        print "Error: Failed to remove all temporary objects\n";
    }
    return;
}

#
# Perform all necessary cleanup tasks (e.g., before exiting).
#
sub do_cleanup {
    remove_temp_objects();
    return;
}

#
# Make sure cleanup tasks happen even on common signals.
#
local $SIG{INT}  = sub { do_cleanup(); toggle_terminal_echo(1); exit 1; };
local $SIG{TERM} = sub { do_cleanup(); toggle_terminal_echo(1); exit 1; };

############################################################################

sub exit_normally {
    do_cleanup();
    exit 0;
}

sub exit_abnormally {
    my ($message, $details) = @_;
    $message = trim($message);
    $details = trim($details);

    if ($message) {
        print "Error: $message" . ($details ? " ($details)" : q()) . "\n";
    }
    do_cleanup();
    exit 1;
}

sub show_usage_and_exit {    ## no critic (RequireFinalReturn)
    my $usage_message = <<"EOF";
Usage: $PROGRAM_NAME --tool <id> <--add|--remove|--replace|--configure> [options]

Manage the SWAMP's add-on tools on this host.

Values for the --tool option, to select the tool to update (choose one):
  coverity            Synopsys Static Analysis (Coverity)
  dependency-check    OWASP Dependency Check
  gt-csonar           GrammaTech CodeSonar
  ps-ctest            Parasoft C/C++test
  ps-jtest            Parasoft Jtest
  retire-js           Retire.js

Arguments for selecting how to update the tool (choose one):
  --add, --install    Install a new version of the tool
  --remove            Remove an existing version of the tool
  --replace           Replace an existing version of the tool
  --configure         Configure the tool

Other options:
  --tool-version, -v           The tool version to modify (e.g., '4.4p0')
  --tool-archive, -f           The path to the tool archive file to install
  --license-server-host, -h    The tool's license server's hostname
  --license-server-port, -p    The port to connect to on the license server
  --limit                      The max number of concurrent assessments to allow
  --tool-conf <file>           File with entries to add to 'services.conf'
  --help, -?                   Display this message
EOF

    print $usage_message;
    exit_abnormally();
}

############################################################################

sub get_options {
    my @errors  = ();
    my %options = ();

    my %defaults = (

        # Where to find various configuration files
        'bundled-tools-inventory-file' => '/opt/swamp/etc/tools-bundled.txt',
        'condor-limits-file' => '/etc/condor/config.d/swampinabox_90_concurrency_limits.conf',
        'swamp-conf-file'    => '/opt/swamp/etc/services.conf',

        # Where to find supporting SQL scripts
        'tool-install-file'   => '/opt/swamp/sql/util/tool_install.sql',
        'tool-uninstall-file' => '/opt/swamp/sql/util/tool_uninstall.sql',
        'tool-scripts-dir'    => '/opt/swamp/sql/tools_add_on',

        # Where to put or find installed tool archives
        'tool-install-dir' => '/swamp/store/SCATools/add_on',

        # Other assorted constants
        'coverity-condor-key'   => 'SYNOPSYSC_LIMIT',
        'coverity-host-key'     => 'tool-sy-coverity-license-host',
        'coverity-port-key'     => 'tool-sy-coverity-license-port',
        'gt-csonar-condor-key'  => 'GRAMMATECHCS_LIMIT',
        'gt-csonar-host-key'    => 'tool-gt-csonar-license-host',
        'gt-csonar-port-key'    => 'tool-gt-csonar-license-port',
        'ps-ctest-condor-key'   => 'PARASOFTC_LIMIT',
        'ps-ctest-host-key'     => 'tool-ps-ctest-dtp-server',
        'ps-ctest-port-key'     => 'tool-ps-ctest-dtp-port',
        'ps-ctest-user-key'     => 'tool-ps-ctest-dtp-user',
        'ps-ctest-password-key' => 'tool-ps-ctest-dtp-password',
        'ps-jtest-condor-key'   => 'PARASOFTJAVA_LIMIT',
        'ps-jtest-host-key'     => 'tool-ps-jtest-dtp-server',
        'ps-jtest-port-key'     => 'tool-ps-jtest-dtp-port',
        'ps-jtest-user-key'     => 'tool-ps-jtest-dtp-user',
        'ps-jtest-password-key' => 'tool-ps-jtest-dtp-password',
    );

    my $ok = Getopt::Long::GetOptions(\%options,
        'help|?',
        'tool-id|tool=s',
        'add|install', 'remove', 'replace', 'configure',
        'tool-version|v=s',
        'tool-archive-file|tool-archive|f=s',
        'license-server-host|h=s',
        'license-server-port|p=i',
        'limit=i',
        'tool-conf-file|tool-conf=s'
    );

    while (my ($key, $value) = each %defaults) {
        if (!exists $options{$key}) {
            $options{$key} = $value;
        }
    }

    if (!$ok || $options{'help'}) {
        print "\n" if !$ok;
        show_usage_and_exit();
    }

    my $tool_id               = $options{'tool-id'}          || q();
    my $tool_version          = $options{'tool-version'}     || q();
    my $tool_scripts_dir      = $options{'tool-scripts-dir'} || q();
    my $tool_parameter_file   = "${tool_scripts_dir}/${tool_id}.sql";
    my $tool_meta_file        = "${tool_scripts_dir}/${tool_id}.meta.sql";
    my $tool_archive_basename = "${tool_id}-${tool_version}.tar.gz";

    $options{'tool-parameter-file'}         = $tool_parameter_file;
    $options{'tool-meta-file'}              = $tool_meta_file;
    $options{'tool-archive-basename'}       = $tool_archive_basename;
    $options{'license-server-host-key'}     = $options{"${tool_id}-host-key"};
    $options{'license-server-port-key'}     = $options{"${tool_id}-port-key"};
    $options{'license-server-user-key'}     = $options{"${tool_id}-user-key"};
    $options{'license-server-password-key'} = $options{"${tool_id}-password-key"};
    $options{'condor-limits-key'}           = $options{"${tool_id}-condor-key"};

    #
    # Make sure a tool was selected, so that we can set the constants
    # that get used everywhere else in this script.
    #
    if (!$tool_id) {
        print "Required argument missing: tool\n";
        print "\n";
        show_usage_and_exit();
    }
    if (!-f $tool_parameter_file) {
        print "Not a recognized tool: $tool_id\n";
        print "\n";
        show_usage_and_exit();
    }

    #
    # Make sure a single mode was selected, so that we can determine
    # which other options are required.
    #
    my $mode_count = 0;
    $mode_count += ($options{'add'}       ? 1 : 0);
    $mode_count += ($options{'remove'}    ? 1 : 0);
    $mode_count += ($options{'replace'}   ? 1 : 0);
    $mode_count += ($options{'configure'} ? 1 : 0);

    if ($mode_count != 1) {
        print "Must specify exactly one of the following options: add remove replace configure\n";
        print "\n";
        show_usage_and_exit();
    }

    #
    # Check that the options provided meet various requirements.
    #
    if (!$options{'tool-archive-file'} && ($options{'add'} || $options{'replace'})) {
        push @errors, 'Required option missing: tool-archive';
    }
    if (!$options{'tool-version'} && ($options{'add'} || $options{'remove'} || $options{'replace'})) {
        push @errors, 'Required option missing: tool-version';
    }

    my $tool_archive_file = $options{'tool-archive-file'};
    if ($tool_archive_file && $tool_version) {    # No need for these warnings if the options were not provided
        my $tool_archive_file_basename = basename($tool_archive_file);

        if (!-f $tool_archive_file) {
            push @errors, "Tool archive file not found: $tool_archive_file";
        }
        elsif (!($tool_archive_file_basename =~ /^\Q$tool_archive_basename\E$/)) {
            push @errors, "Tool archive file does not look like: $tool_archive_basename";
        }
    }

    my $license_count = 0;
    $license_count += ($options{'license-server-host'} ? 1 : 0);
    $license_count += ($options{'license-server-port'} ? 1 : 0);

    if ($options{'configure'} && !($license_count == 0 || $license_count == 2)) {
        push @errors, 'Options must be specified together: license-server-host license-server-port';
    }

    my $license_server_host = $options{'license-server-host'} || q();
    my $license_server_ip = inet_aton($license_server_host);
    if ($license_server_host && !$license_server_ip) {    # No need for this warning if the host was not provided
        push @errors, "Unable to determine IP address of license server host: $license_server_host";
    }

    my $tool_conf_file = $options{'tool-conf-file'};
    if ($options{'configure'} && $tool_conf_file) {
        if (!-f $tool_conf_file) {
            push @errors, "Tool configuration file not found: $tool_conf_file";
        }
    }

    for my $key (qw(bundled-tools-inventory-file condor-limits-file swamp-conf-file tool-install-file tool-uninstall-file)) {
        my $val = $options{$key};
        if (!-f $val) {
            push @errors, "Missing file from SWAMP installation: $val";
        }
    }

    for my $key (qw(tool-scripts-dir tool-install-dir)) {
        my $val = $options{$key};
        if (!-d $val) {
            push @errors, "Missing directory from SWAMP installation: $val";
        }
    }

    if (!-d $sql_options_dir) {
        push @errors, "Missing directory from SWAMP installation: $sql_options_dir";
    }

    for my $msg (@errors) {
        print $msg . "\n";
    }

    if (!$ok || scalar @errors > 0) {
        print "\n";
        show_usage_and_exit();
    }

    return \%options;
}

############################################################################

sub is_bundled_tool {
    my ($options)      = @_;
    my $inventory_file = $options->{'bundled-tools-inventory-file'};
    my $tool_id        = $options->{'tool-id'};
    my $tool_version   = $options->{'tool-version'};

    my $inventory = (-r $inventory_file) ? read_file($inventory_file) : q();
    my @inventory_lines = split /^/, $inventory;

    return grep { /^${tool_id}-${tool_version}(.tar)?(.gz)?$/ } @inventory_lines;
}

sub check_running_as_root {
    my $whoami = trim(qx(whoami));
    if ($whoami ne 'root') {
        exit_abnormally(q(This utility must be run as 'root'. Perhaps use 'sudo'.));
    }
    return;
}

sub check_system_requirements {
    my ($options) = @_;

    return if !($options->{'add'} || $options->{'replace'} || $options->{'remove'});

    my $tool_version      = $options->{'tool-version'};
    my $tool_version_uuid = get_tool_version_uuid($options);
    my $tool_name         = get_tool_name($options);

    if (is_bundled_tool($options)) {
        exit_abnormally("Cannot modify a bundled version of $tool_name");
    }
    if ($options->{'add'} && $tool_version_uuid) {
        exit_abnormally("$tool_name $tool_version already appears to be installed");
    }
    if ($options->{'replace'} && !$tool_version_uuid) {
        exit_abnormally("$tool_name $tool_version does not appear to be installed");
    }
    return;
}

############################################################################

#
# Get the credentials for accessing the DB.
#
sub get_db_credentials {
    my ($options)      = @_;
    my $prompt         = q(Enter the password for the database's 'root' user: );
    my $password       = q();
    my $valid_password = 0;

    while (!$valid_password) {
        toggle_terminal_echo(0);
        print $prompt;
        $password = <>;
        toggle_terminal_echo(1);
        print "\n";
        chomp $password;

        $options->{'db-username'} = 'root';
        $options->{'db-password'} = $password;

        create_sql_options_file($options, 1);

        my ($output, $status) = do_command(qq(echo "\\q" | $mysql_command));
        if ($status) {
            print $output;
        }
        else {
            $valid_password = 1;
        }
    }
    return;
}

#
# Create the password file for accessing the DB.
#
sub create_sql_options_file {
    my ($options, $force_create) = @_;

    if (!$force_create && -f $sql_options_file) {
        return;
    }
    if (!$options->{'db-username'} || !$options->{'db-password'}) {
        get_db_credentials($options);
    }

    my $username = $options->{'db-username'};
    my $password = $options->{'db-password'};

    #
    # In the options file for MySQL:
    #   - Quote the password, in case it contains '#'.
    #   - Escape backslashes (the only character that needs escaping).
    #
    # See: http://dev.mysql.com/doc/refman/5.7/en/option-files.html
    #
    $username =~ s/\\/\\\\/g;
    $password =~ s/\\/\\\\/g;

    my $sql_options = <<"EOF";
[client]
user='$username'
password='$password'
EOF

    #
    # Make sure the created file is not publicly readable.
    #
    write_file($sql_options_file, q());
    chmod 0600, $sql_options_file
      || exit_abnormally("Failed to set permissions on: $sql_options_file");

    write_file($sql_options_file, $sql_options);
    chmod 0400, $sql_options_file
      || exit_abnormally("Failed to set permissions on: $sql_options_file");

    return;
}

#
# Return the result of executing the given SQL query/statement(s).
#
sub get_sql_query_results {
    my ($options, $query) = @_;
    my $escaped_query = escape_dquotes($query);

    create_sql_options_file($options);

    my ($output, $status) = do_command(qq(echo "$escaped_query" | $mysql_command));
    if ($status) {
        exit_abnormally("Failed to execute SQL query ($query)", $output);
    }
    return trim($output);
}

############################################################################

#
# Return a UUID as generated by the DB.
#
sub generate_uuid {
    my ($options) = @_;
    return get_sql_query_results($options, q(set @val = uuid(); select @val));    ## no critic (RequireInterpolationOfMetachars)
}

#
# Return the SHA512 checksum for the given file.
#
sub generate_sha512_checksum {
    my ($file) = @_;
    my $escaped_file = escape_dquotes($file);

    my ($output, $status) = do_command(qq(sha512sum "$escaped_file"));
    if ($status) {
        exit_abnormally("Failed to compute SHA512 checksum for: $file", $output);
    }

    my @pieces = split /\s+/, trim($output);
    return $pieces[0];
}

#
# Return the name for the currently selected tool.
#
sub get_tool_name {
    my ($options) = @_;

    if (defined $options->{'tool-name'}) {
        return $options->{'tool-name'};
    }

    my $tool_params_file = $options->{'tool-parameter-file'} || q();
    my $tool_params_sql = (-r $tool_params_file) ? read_file($tool_params_file) : q();

    my $query = qq(${tool_params_sql}; select \@name);
    my $results = get_sql_query_results($options, $query);

    my ($tool_name) = split /^/, $results;
    $options->{'tool-name'} = $tool_name;
    return $tool_name;
}

#
# Return the tool version UUID for the currently selected tool.
#
sub get_tool_version_uuid {
    my ($options) = @_;

    if (defined $options->{'tool-version-uuid'}) {
        return $options->{'tool-version-uuid'};
    }

    my $version_string = $options->{'tool-version'} || q();
    my $escaped_version_string = escape_squotes($version_string);

    my $tool_params_file = $options->{'tool-parameter-file'} || q();
    my $tool_params_sql = (-r $tool_params_file) ? read_file($tool_params_file) : q();

    my $query = qq(${tool_params_sql}; select tool_version_uuid from tool_shed.tool_version where tool_uuid = \@tool_uuid and version_string = '$escaped_version_string');
    my $results = get_sql_query_results($options, $query);

    my ($tool_version_uuid) = split /^/, $results;
    $options->{'tool-version-uuid'} = $tool_version_uuid;
    return $tool_version_uuid;
}

############################################################################

sub update_license_server_config {
    my ($options, $swamp_conf) = @_;
    my $license_server_host_key = $options->{'license-server-host-key'};
    my $host                    = $options->{'license-server-host'};
    my $license_server_port_key = $options->{'license-server-port-key'};
    my $port                    = $options->{'license-server-port'};

    if ($license_server_host_key && $host && $license_server_port_key && $port) {
        print "Processing updates to license server configuration ($host, port $port)\n";

        $swamp_conf = merge_key_val($swamp_conf, $license_server_host_key, $host);
        $swamp_conf = merge_key_val($swamp_conf, $license_server_port_key, $port);
    }
    return $swamp_conf;
}

sub update_tool_config {
    my ($options, $swamp_conf) = @_;
    my $tool_conf_file = $options->{'tool-conf-file'} || q();

    if (-r $tool_conf_file) {
        print "Processing updates from '$tool_conf_file'\n";

        my $tool_conf = read_file($tool_conf_file);
        my @lines = split /^/, trim($tool_conf);
        for my $line (@lines) {
            $line = trim($line);
            if ($line =~ /^#/) {
                next;
            }

            my @pieces = split /=/, $line;
            my $key = trim($pieces[0]);
            if ($key) {
                my $val = get_key_val($tool_conf, $key);
                if (defined $val) {
                    $swamp_conf = merge_key_val($swamp_conf, $key, $val);
                }
            }
        }
    }
    return $swamp_conf;
}

sub update_user_password_config {
    my ($options, $swamp_conf) = @_;
    my $user_key     = $options->{'license-server-user-key'};
    my $password_key = $options->{'license-server-password-key'};

    if ($user_key && $password_key) {
        print 'Configure license server user/password? [N/y] ';
        my $response = <>;

        if (!($response =~ /^y(es)?$/i)) {
            print "Not updating configuration for license server user/password\n";
            return $swamp_conf;
        }

        print 'Enter license server user: ';
        my $user = <>;
        chomp $user;

        toggle_terminal_echo(0);
        print 'Enter license server password: ';
        my $password = <>;
        toggle_terminal_echo(1);
        print "\n";
        chomp $password;

        $swamp_conf = merge_key_val($swamp_conf, $user_key, $user);
        $swamp_conf = merge_key_val($swamp_conf, $password_key, $password);
    }
    return $swamp_conf;
}

############################################################################

#
# Add/remove/replace the tool archive file.
#
sub update_tool_archive {
    my ($options) = @_;

    if ($options->{'add'} || $options->{'replace'}) {
        my $tool_archive_file = $options->{'tool-archive-file'};
        my $tool_install_dir  = $options->{'tool-install-dir'};

        print "Installing '$tool_archive_file' in '$tool_install_dir'\n";

        my $escaped_tool_archive_file = escape_dquotes($tool_archive_file);
        my $escaped_tool_install_dir  = escape_dquotes($tool_install_dir);

        my ($output, $status) = do_command(qq(install -m 644 -o root -g root "$escaped_tool_archive_file" "$escaped_tool_install_dir"));
        if ($status) {
            exit_abnormally("Failed to install '$tool_archive_file' in '$tool_install_dir'", $output);
        }
    }

    if ($options->{'remove'}) {
        my $tool_install_dir      = $options->{'tool-install-dir'};
        my $tool_version          = $options->{'tool-version'};
        my $tool_archive_basename = $options->{'tool-archive-basename'};
        my $file_to_remove        = "$tool_install_dir/$tool_archive_basename";

        #
        # It's not an error if the tool archive file is already not present.
        #
        if (-f $file_to_remove) {
            print "Removing '$tool_archive_basename' from '$tool_install_dir'\n";

            if (!unlink $file_to_remove) {
                print "Warning: Failed to remove file: $file_to_remove\n";
            }
        }
    }
    return;
}

#
# Update configuration files.
#
sub update_swamp_config {
    my ($options) = @_;

    return if !$options->{'configure'};

    #
    # Update the SWAMP's configuration.
    #
    my $swamp_conf_file     = $options->{'swamp-conf-file'};
    my $swamp_conf          = (-r $swamp_conf_file) ? read_file($swamp_conf_file) : q();
    my $original_swamp_conf = $swamp_conf;

    $swamp_conf = update_license_server_config($options, $swamp_conf);
    $swamp_conf = update_tool_config($options, $swamp_conf);
    $swamp_conf = update_user_password_config($options, $swamp_conf);

    if ($swamp_conf ne $original_swamp_conf) {
        print "Writing new version of '$swamp_conf_file'\n";

        backup_file($swamp_conf_file);
        write_file($swamp_conf_file, $swamp_conf);
    }

    #
    # Update HTCondor's configuration.
    #
    my $condor_limits_file = $options->{'condor-limits-file'};
    my $condor_limits_key  = $options->{'condor-limits-key'};
    my $limit              = $options->{'limit'};

    if ($condor_limits_key && $limit) {
        print "Updating HTCondor concurrency limits in '$condor_limits_file' (new limit: $limit)\n";

        my $condor_limits = (-r $condor_limits_file) ? read_file($condor_limits_file) : q();
        $condor_limits = merge_key_val($condor_limits, $condor_limits_key, $limit);

        #
        # CSA-3189: Don't backup the HTCondor configuration file.
        # HTCondor reads *all* files in the directory, including the
        # backups. Also, the file can be recreated easily.
        #
        write_file($condor_limits_file, $condor_limits);

        print "Instructing HTCondor daemons to reconfigure themselves\n";

        my ($output, $status) = do_command('condor_reconfig');
        if ($status) {
            exit_abnormally('Failed to reconfigure HTCondor daemons', $output);
        }
    }
    return;
}

#
# Add/remove/replace the database entries.
#
sub update_database {
    my ($options) = @_;

    return if !($options->{'add'} || $options->{'remove'} || $options->{'replace'});

    my $tool_version_uuid = get_tool_version_uuid($options);
    return if ($options->{'remove'}  && !$tool_version_uuid);    # It's not an error if the database entries have already been removed.
    return if ($options->{'replace'} && !$tool_version_uuid);

    print "Updating database entries\n";

    my $tool_install_dir  = $options->{'tool-install-dir'};
    my $tool_archive      = $options->{'tool-archive-file'};
    my $tool_archive_file = $tool_archive ? basename($tool_archive) : q();
    my $tool_version      = $options->{'tool-version'};
    my $tool_params_file  = $options->{'tool-parameter-file'};
    my $tool_meta_file    = $options->{'tool-meta-file'};
    my $checksum          = q();
    my $tool_script_file  = q();

    if ($tool_archive) {
        $checksum = generate_sha512_checksum($tool_archive);
    }
    if ($options->{'add'}) {
        $tool_version_uuid = generate_uuid($options);
    }
    if ($options->{'add'} || $options->{'replace'}) {
        $tool_script_file = $options->{'tool-install-file'};
    }
    if ($options->{'remove'}) {
        $tool_script_file = $options->{'tool-uninstall-file'};
    }

    my $escaped_tool_version      = escape_squotes($tool_version);
    my $escaped_tool_version_uuid = escape_squotes($tool_version_uuid);
    my $escaped_tool_install_dir  = escape_squotes($tool_install_dir);
    my $escaped_tool_archive_file = escape_squotes($tool_archive_file);
    my $escaped_checksum          = escape_squotes($checksum);

    my $tool_params = <<"EOF";
set \@tool_version_uuid  = '${escaped_tool_version_uuid}';
set \@version_string     = '${escaped_tool_version}';
set \@tool_path          = '${escaped_tool_install_dir}/${escaped_tool_archive_file}';
set \@checksum           = '${escaped_checksum}';
EOF

    #
    # The internal version number is automatically computed on the initial
    # insert but must be fed back in on an update.
    #
    if ($options->{'replace'}) {
        $tool_params .= "\nset \@version_no = (select version_no from tool_shed.tool_version where tool_version_uuid = '$escaped_tool_version_uuid');\n";
    }

    my $tool_params_sql = (-r $tool_params_file) ? read_file($tool_params_file) : q();
    my $tool_meta_sql   = (-r $tool_meta_file)   ? read_file($tool_meta_file)   : q();
    my $tool_script_sql = (-r $tool_script_file) ? read_file($tool_script_file) : q();
    my $complete_sql_script = $tool_params . $tool_params_sql . $tool_meta_sql . $tool_script_sql;
    my $ignore_results = get_sql_query_results($options, $complete_sql_script);
    return;
}

############################################################################

sub main {
    my $options = get_options();

    check_running_as_root($options);
    check_system_requirements($options);

    if ($options->{'configure'}) {
        update_swamp_config($options);
    }

    #
    # The database controls the SWAMP UI:
    #
    #   - When adding a tool, update the database after we've installed the
    #     tool archive file, so that the tool will definitely be useable.
    #   - When removing a tool, update the database first, so that it won't
    #     be useable even if the actual tool archive file remains behind.
    #
    if ($options->{'add'} || $options->{'replace'}) {
        update_tool_archive($options);
        update_database($options);
    }
    elsif ($options->{'remove'}) {
        update_database($options);
        update_tool_archive($options);
    }

    #
    # Indicate that the script has completed normally.
    #
    my $tool_name    = $options->{'tool-name'}    || 'tool';
    my $tool_version = $options->{'tool-version'} || 'version';

    if ($options->{'add'}) {
        print "Finished adding $tool_name $tool_version\n";
    }
    if ($options->{'remove'}) {
        print "Finished removing $tool_name $tool_version\n";
    }
    if ($options->{'replace'}) {
        print "Finished replacing $tool_name $tool_version\n";
    }
    if ($options->{'configure'}) {
        print "Finished configuring $tool_name\n";
    }
    return;
}

main();
exit_normally();
